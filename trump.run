reset;
model trump.mod;
data trump.dat;

# turn objective on or off, change output dir
/*
	folder :
		0 : objective on, Gurobi
		1 : objective off, Gurobi
		2 : objective off, CPLEX
*/
var folder := 0;

var optimise := 1;


if folder == 0 then {
	restore ObjectiveOn;
	drop ObjectiveOff;
	option solver gurobi;
	
}
else {
	if folder == 1 then {
		option solver gurobi;
	}
	else {
		option solver cplex;
		option cplex_options 'mipgap=0';
	}
	drop ObjectiveOn;
	restore ObjectiveOff;
	let optimise := 0;
}

var runNumber := 0;
var bestObj := Infinity;
let totalDays := nWeeks * card(DAYS);
let nightShift[nWeeks] := 1;	# put nightshift on last week

# enumerate registrar starting weeks
for {i in {1}} {	# first week doesn't need to change; it is a cycle
	for {j in WEEKS diff {i}} {
		for {k in WEEKS diff {i,j}} {
			for {l in WEEKS diff {i,j,k}} {
				for {m in WEEKS diff {i,j,k,l}} {
					for {n in WEEKS diff {i,j,k,l,m}} {
						if i<=j and k<=l and m<=n and k<=m then {	# ordering to remove symmetry
							let startingWeeks['LIME', 1] := i;
							let startingWeeks['LIME', 2] := j;
							let startingWeeks['NAVY', 1] := k;
							let startingWeeks['NAVY', 2] := l;
							let startingWeeks['YELLOW', 1] := m;
							let startingWeeks['YELLOW', 2] := n;

							let runNumber := runNumber + 1;
							printf"\nRun:\t%s\t%d/15\n", i&j&'-'&k&l&'-'&m&n, runNumber;

							solve;

							printf "%s\n", solve_message > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
							printf "objective: %f\noptimise: %s\n", totalWardDiff, optimise > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
							if totalWardDiff < bestObj then {
								printf "New incumbent: iter %d at %.2f\n", runNumber, totalWardDiff;
								let bestObj := totalWardDiff;
							}
							printf "Week\tMon\tTue\tWed\tThu\tFri\tSat\tSun\n" > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
							for {w in WEEKS} {
								printf " %d", w > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
								for {d in DAYS} {
									printf "\t& " > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
									for {s in {'N', 'Z'}} {
										if schedule[s, w, d] > 0 then {
											printf "%c", s > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
										}
									}
									for {s in SHIFTS diff {'N', 'Z'}} {
										if schedule[s, w, d] > 0 then {
											printf "%c", s > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
										}
									}
								}
								printf "\t\\\\\n" > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
							}
							display occupancy > ("results/"&folder&"/"&i&j&"-"&k&l&"-"&m&n&".txt");
						}
					}
				}
			}
		}
	}
}

printf "Best objective: %.2f in %.2f s\n", bestObj, _total_solve_time;

#solve;
/*
printf "Roster:\tMon\tTue\tWed\tThu\tFri\tSat\tSun\n";
for {w in WEEKS} {
	printf "Week %d\t ", w;
	for {d in DAYS} {
		for {s in {'N', 'Z'}} {
			if schedule[s, w, d] > 0 then {
				printf "%c", s;
			};
		};
		for {s in SHIFTS diff {'N', 'Z'}} {
			if schedule[s, w, d] > 0 then {
				printf "%c", s;
			};
		};
		printf "\t ";
	};
	printf "\n";
};

display occupancy;
*/
